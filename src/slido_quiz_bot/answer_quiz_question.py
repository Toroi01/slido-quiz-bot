"""This module provides tools for answering multiple-choice quiz questions using a generative AI model.

Known Limitation:
    - Supports a maximum of 10 answer choices (indices 0 through 9).
"""

import enum

import google.generativeai as genai
from rich.console import Console

from slido_quiz_bot.quizz_question import QuizQuestion

console = Console()


class AnswerIndex(enum.Enum):
    """An enumeration representing answer indices for multiple-choice questions.

    This class defines a mapping of numeric indices (0-9) to their corresponding string representations.
    It is used to constrain and validate responses generated by the AI model.
    """

    ZERO = "0"
    ONE = "1"
    TWO = "2"
    THREE = "3"
    FOUR = "4"
    FIVE = "5"
    SIX = "6"
    SEVEN = "7"
    EIGHT = "8"
    NINE = "9"


def format_prompt(quiz_question: QuizQuestion) -> str:
    r"""Formats a prompt for a multiple-choice quiz question.

    Args:
        quiz_question (QuizQuestion): The quiz question object containing the question text and answer choices.

    Returns:
        str: A formatted string containing the question and its choices, ready for input into the model.

    Example:
        >>> format_prompt(
        ...   QuizQuestion(
        ...     "What is the capital of France?", ["Paris", "London", "Berlin", "Madrid"]
        ...   )
        ... )
        'Question: What is the capital of France?\nChoices:\n0. Paris\n1. London\n2. Berlin\n3. Madrid\nChoose the best answer (provide the number):'
    """
    choices_str = "\n".join(f"{i}. {choice}" for i, choice in enumerate(quiz_question.answer_choices))
    return f"Question: {quiz_question.question}\nChoices:\n{choices_str}\nChoose the best answer (provide the number):"


def answer_quiz_question(quiz_question: QuizQuestion) -> int:
    """Uses a generative AI model to answer a multiple-choice quiz question.

    Args:
        quiz_question (QuizQuestion): The quiz question object containing the question text and answer choices.

    Returns:
        int: The index of the chosen answer.
    """
    # List of models to try in order
    models = ["gemini-1.5-flash", "gemini-1.5-pro-latest"]

    # Format the prompt
    prompt = format_prompt(quiz_question)

    # Generate the answer
    for model_name in models:
        try:
            model = genai.GenerativeModel(model_name)
            answer = model.generate_content(
                prompt,
                generation_config=genai.types.GenerationConfig(
                    response_mime_type="text/x.enum",
                    response_schema=AnswerIndex,
                    max_output_tokens=2,
                    temperature=1.0,
                ),
            )
            return int(answer.text.strip())
        except ValueError as e:
            raise ValueError(f"Failed to convert model response to integer for model {model_name}: {e}") from e
        except Exception as e:
            console.log(f"[bold red] Error with model {model_name}: {e}. Trying next model...")

    raise RuntimeError("All models failed to generate a valid answer.")
