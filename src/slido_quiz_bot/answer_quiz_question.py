"""
This module provides tools for answering multiple-choice quiz questions using a generative AI model.
Known Limitation:
    - Supports a maximum of 10 answer choices (indices 0 through 9).
"""

import google.generativeai as genai
import enum


class AnswerIndex(enum.Enum):
  """
  An enumeration representing answer indices for multiple-choice questions.

  This class defines a mapping of numeric indices (0-9) to their corresponding string representations.
  It is used to constrain and validate responses generated by the AI model.
  """

  ZERO = "0"
  ONE = "1"
  TWO = "2"
  THREE = "3"
  FOUR = "4"
  FIVE = "5"
  SIX = "6"
  SEVEN = "7"
  EIGHT = "8"
  NINE = "9"


def format_prompt(question: str, choices: list[str]) -> str:
  """
  Formats a prompt for a multiple-choice quiz question.

  Args:
      question (str): The quiz question to be answered.
      choices (list[str]): A list of possible answer choices.

  Returns:
      str: A formatted string containing the question and its choices, ready for input into the model.

  Example:
      >>> format_prompt("What is the capital of France?", ["Paris", "London", "Berlin", "Madrid"])
      'Question: What is the capital of France?\nChoices:\n0. Paris\n1. London\n2. Berlin\n3. Madrid\nChoose the best answer (provide the number):'
  """
  choices_str = "\n".join(f"{i}. {choice}" for i, choice in enumerate(choices))
  return f"Question: {question}\nChoices:\n{choices_str}\nChoose the best answer (provide the number):"


def answer_quiz_question(question: str, answer_choices: list[str]) -> int:
  """
  Uses a generative AI model to answer a multiple-choice quiz question.

  Args:
      question (str): The quiz question to answer.
      answer_choices (list[str]): List of possible answer choices.

  Returns:
      int: The index of the chosen answer.
  """
  # Initialize the model
  model = genai.GenerativeModel("gemini-1.5-pro-latest")

  # Format the prompt
  prompt = format_prompt(question, answer_choices)

  # Generate the answer
  try:
    answer = model.generate_content(
      prompt,
      generation_config=genai.types.GenerationConfig(
        response_mime_type="text/x.enum",
        response_schema=AnswerIndex,
        max_output_tokens=2,
        temperature=1.0,
      ),
    )
    return int(answer.text.strip())
  except ValueError:
    raise ValueError("The model's response could not be converted to an integer.")
  except Exception as e:
    raise RuntimeError(f"An error occurred while generating the answer: {e}")
